//
//  WeatherViewController.swift
//  CleanTest
//
//  Created by Vadim Yushchenko on 24.11.2019.
//  Copyright (c) 2019 Vadim Yushchenko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WeatherDisplayLogic: class
{
  func displayWeather(viewModel: Weather.Get.ViewModel)
}

class WeatherViewController: UIViewController, WeatherDisplayLogic
{
  var interactor: WeatherBusinessLogic?
  var router: (NSObjectProtocol & WeatherRoutingLogic & WeatherDataPassing)?

    @IBOutlet weak var city: UILabel!
    @IBOutlet weak var clouds: UILabel!
    @IBOutlet weak var temp: UILabel!
    @IBOutlet weak var windSpeed: UILabel!
    // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = WeatherInteractor()
    let presenter = WeatherPresenter()
    let router = WeatherRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  
  func displayWeather(viewModel: Weather.Get.ViewModel)
  {
    city.text = viewModel.weather.city
    temp.text = viewModel.weather.temperature
    clouds.text = viewModel.weather.cloudiness
    windSpeed.text = viewModel.weather.windSpeed
    view.subviews.forEach({$0.isHidden = false})
  }
}


extension WeatherViewController: FlightViewControllerDelegate {
    func flightViewController(_ flightViewController: FlightViewController, didSelectDestination destination: String) {
        let request = Weather.Get.Request(city: destination)
        interactor?.getWeather(request: request)
    }
}
