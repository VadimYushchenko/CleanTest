//
//  ContainerViewController.swift
//  CleanTest
//
//  Created by Vadim Yushchenko on 24.11.2019.
//  Copyright (c) 2019 Vadim Yushchenko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ContainerDisplayLogic: class
{
  func displaySomething(viewModel: Container.Something.ViewModel)
}

class ContainerViewController: UIViewController, ContainerDisplayLogic
{
  var interactor: ContainerBusinessLogic?
  var router: (NSObjectProtocol & ContainerRoutingLogic & ContainerDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ContainerInteractor()
    let presenter = ContainerPresenter()
    let router = ContainerRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
    
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    private var lastConstraint: NSLayoutConstraint?
    private var constraints: [NSLayoutConstraint] = []
    
    override func addChild(_ childController: UIViewController) {
        super.addChild(childController)
        view.addSubview(childController.view)
        childController.view.translatesAutoresizingMaskIntoConstraints = false
        
        addConstraints(to: children)
    }
    
    func removeChild(_ childController: UIViewController){
        view.removeConstraints(constraints)
        childController.view.removeFromSuperview()
        childController.removeFromParent()
        addConstraints(to: children)
    }
    
    var stackView: UIStackView!
    
    fileprivate func setupStackView() {
        stackView = UIStackView()
        stackView.axis = .vertical
        stackView.distribution = .fillEqually
        view.addSubview(stackView)
        stackView.translatesAutoresizingMaskIntoConstraints = false
        let constraints = [
            stackView.topAnchor.constraint(equalTo: view.topAnchor),
            stackView.leftAnchor.constraint(equalTo: view.leftAnchor),
            stackView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            stackView.rightAnchor.constraint(equalTo: view.rightAnchor)
        ]
        
        NSLayoutConstraint.activate(constraints)
    }
    
    override func viewDidLoad()
  {
    super.viewDidLoad()
//    setupStackView()
    doSomething()
  }
  
  // MARK: Do something
  fileprivate func addConstraints(to views: [UIViewController]) {
      var pView: UIView? = nil
    view.removeConstraints(constraints)
      for (index, controller) in views.enumerated() {
//        constraints.append(contentsOf: layout(view: controller.view, prevView: pView))
        constraints.append(contentsOf: controller.view.pin(to: pView))
          pView = controller.view
          if index == children.count - 1 {
              let lConstraint = controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
              lConstraint.isActive = true
              constraints.append(lConstraint)
          }
      }
  }
    // TODO: it's could be moved to extention
    private func layout(view: UIView, prevView: UIView?) -> [NSLayoutConstraint]{
            guard let superview = view.superview else {
                return []
            }
        var constraints: [NSLayoutConstraint] = []
        constraints.append(view.trailingAnchor.constraint(equalTo: superview.trailingAnchor))
        constraints.append(view.leadingAnchor.constraint(equalTo: superview.leadingAnchor))

        if let pView = prevView {
            constraints.append(view.topAnchor.constraint(equalTo: pView.bottomAnchor))
            constraints.append(view.heightAnchor.constraint(equalTo: pView.heightAnchor, multiplier: 1))
        }else {
            constraints.append(view.topAnchor.constraint(equalTo: superview.topAnchor))
        }

        NSLayoutConstraint.activate(constraints)
        return constraints
}
    
    
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Container.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Container.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}
