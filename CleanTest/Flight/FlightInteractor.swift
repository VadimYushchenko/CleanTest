//
//  FlightInteractor.swift
//  CleanTest
//
//  Created by Vadim Yushchenko on 24.11.2019.
//  Copyright (c) 2019 Vadim Yushchenko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FlightBusinessLogic
{
    func fetchFlights(request: Flight.List.Request)
    func getCity(at index: Int)
    var name: String { get }
}

protocol FlightDataStore
{
  var name: String { get set }
}

class FlightInteractor: FlightBusinessLogic, FlightDataStore
{
    
    
  var presenter: FlightPresentationLogic?
  var worker: FlightWorker?
    private var fligths: [FlightResponse] = []
    var cityWorker: CityWorker = CityWorker(filename: "cities")
    var name: String = "" {
        didSet {
            let request = Flight.List.Request(source: name)
            fetchFlights(request: request)
        }
    }
  // MARK: Do something
  
  func fetchFlights(request: Flight.List.Request)
  {
    worker = FlightWorker()
    worker?.fetch(city: request.source, completion: { (fligths) in
        self.fligths = fligths
        let response = Flight.List.Response(flights: fligths)
        self.presenter?.presentFlights(response: response)
    })
  }
    
    func getCity(at index: Int) {
        let flight = fligths[index]
        let name = cityWorker[flight.destination] ?? flight.destination
        let response = Flight.GetCity.Response(city: name)
//        self.name = name
        presenter?.presentWeather(response: response)
    }
}
