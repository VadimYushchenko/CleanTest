//
//  FlightViewController.swift
//  CleanTest
//
//  Created by Vadim Yushchenko on 24.11.2019.
//  Copyright (c) 2019 Vadim Yushchenko. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FlightDisplayLogic: class
{
  func displayFlights(viewModel: Flight.List.ViewModel)
    func showWeather(city: String)
}

protocol FlightViewControllerDelegate: class {
    func flightViewController(_ flightViewController: FlightViewController, didSelectDestination destination: String)
}

class FlightViewController: UITableViewController, FlightDisplayLogic
{
    var interactor: FlightBusinessLogic?
    var router: (NSObjectProtocol & FlightRoutingLogic & FlightDataPassing)?
    weak var delegate: FlightViewControllerDelegate?
    var sourceCity: String? = "TLL"//"YXU"
    private var flights: [Flight.List.ViewModel.Flight] = []
   
    
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FlightInteractor()
    let presenter = FlightPresenter()
    let router = FlightRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    setup(table: tableView)
    fetchFlights()
  }
  
    private func setup(table: UITableView){
        let nib = UINib(nibName: "FlightTableViewCell", bundle: nil)
        table.register(nib, forCellReuseIdentifier: "FlightTableViewCell")
        table.delegate = self
        table.dataSource = self
        
    }
    
  // MARK:
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func fetchFlights()
  {
    guard let city = sourceCity else { return  }
    
    let request = Flight.List.Request(source: city)
    interactor?.fetchFlights(request: request)
  }
  
  func displayFlights(viewModel: Flight.List.ViewModel)
  {
    flights = viewModel.flights
    tableView.reloadData()
  }
    
    func showWeather(city: String) {
        delegate?.flightViewController(self, didSelectDestination: city)
    }
}
//MARK: - Table DataSource
extension FlightViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return flights.count
    }
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FlightTableViewCell", for: indexPath) as! FlightTableViewCell
        let flight = flights[indexPath.row]
        cell.airline.text = flight.airline
        cell.price.text = flight.price
        cell.city.text = flight.destination
        cell.transfer.text = flight.transfers
        return cell
    }
}

//MARK: Table Delegate

extension FlightViewController {
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        interactor?.getCity(at: indexPath.row)
    }
}
